{"version":3,"sources":["components/PageHeader/index.js","components/SearchBar/index.js","components/TableData/index.js","components/TableHeader/index.js","util/API.js","components/TableArea/index.js","App.js","serviceWorker.js","index.js"],"names":["PageHeader","className","React","Component","SearchBar","onSubmit","this","props","handleSubmit","name","value","search","onChange","handleInputChange","TableData","employees","map","employee","scope","src","picture","medium","alt","first","last","phone","email","format","dob","date","TableHeader","onClick","SortByName","getEmployeeName","query","axios","get","TableArea","state","componentDidMount","loadEmployees","event","target","setState","then","response","console","log","data","results","catch","err","searchEmployee","filter","filteredList","item","Object","values","join","toLowerCase","indexOf","handleInputSubmit","preventDefault","e","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+QAEqBA,E,iLAEb,OACI,6BACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,0BAAd,sBACA,uBAAGA,UAAU,+BAAb,yF,GAPgBC,IAAMC,WCCzBC,E,iLAOb,OACI,6BACI,0BAAMC,SAAUC,KAAKC,MAAMC,cACvB,2BACIC,KAAK,SACLC,MAAOJ,KAAKC,MAAMI,OAClBC,SAAUN,KAAKC,MAAMM,oBAIzB,gD,GAjBmBX,IAAMC,W,iBCOxBW,E,iLAKb,OACI,6BAEI,2BAAOb,UAAU,SAGb,+BAKKK,KAAKC,MAAMQ,UAAUC,KAAI,SAACC,GAAD,OAEtB,4BACI,wBAAIC,MAAM,QAEV,4BACI,yBACIC,IAAKF,EAASG,QAAQC,OACtBC,IAAI,cAKZ,4BAAKL,EAASR,KAAKc,MAAnB,IAA2BN,EAASR,KAAKe,MACzC,4BAAKP,EAASQ,OACd,4BAAKR,EAASS,OACd,kBAAC,IAAD,CAAQC,OAAO,cACX,4BAAKV,EAASW,IAAIC,kB,GAjCf3B,IAAMC,WCNxB2B,E,iLAeb,OACI,6BACI,2BAAO7B,UAAU,SACb,2BAAOA,UAAU,eACb,4BACI,wBAAIiB,MAAM,OAAV,SAGA,wBAAIA,MAAM,MAENa,QAASzB,KAAKC,MAAMyB,YAFxB,QASA,wBAAId,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,e,GAlCahB,IAAMC,W,uBCChC,SAAS8B,EAAgBC,GAKpC,OAAOC,IAAMC,IADG,iD,ICACC,E,2MAGjBC,MAAQ,CACJ3B,OAAQ,OACRI,UAAW,I,EAGfwB,kBAAoB,WAChB,EAAKC,iB,EAGT3B,kBAAoB,SAAC4B,GAAW,IAAD,EACHA,EAAMC,OAAtBjC,EADmB,EACnBA,KAAMC,EADa,EACbA,MACd,EAAKiC,SAAL,eAESlC,EAAOC,K,EAKpB8B,cAAgB,iBAAM,CAClBP,IACKW,MAAK,SAACC,GACHC,QAAQC,IAAIF,GACZ,EAAKF,SACD,CAEI5B,UAAW8B,EAASG,KAAKC,aAKpCC,OAAM,SAACC,GACJL,QAAQC,IAAII,Q,EAMxBC,eAAiB,iBAAM,CACnBnB,IACKW,MAAK,SAACC,GAEHC,QAAQC,IAAIF,GAEZ,IAAIQ,EAAS,EAAKf,MAAM3B,OAEpB2C,EAAeT,EAASG,KAAKC,QAAQI,QAAO,SAAAE,GAK5C,OAAiD,IAHpCC,OAAOC,OAAOF,EAAK9C,KAAKc,OAChCmC,KAAK,IACLC,cACSC,QAAQP,EAAOM,kBAGjC,EAAKhB,SACD,CACI5B,UAAWuC,OAKtBJ,OAAM,SAACC,GACJL,QAAQC,IAAII,Q,EAOxBU,kBAAoB,SAACpB,GACjBA,EAAMqB,iBACNhB,QAAQC,IAAI,SAKZ,EAAKK,kB,EAKTpB,WAAa,SAAC+B,K,wEAkBV,OACI,yBAAK9D,UAAU,WAEX,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACIU,OAAQL,KAAKgC,MAAM3B,OACnBE,kBAAmBP,KAAKO,kBACxBL,aAAcF,KAAKuD,oBAIvB,kBAAC,EAAD,CAAa7B,WAAY1B,KAAK0B,aAC9B,kBAAC,EAAD,CACIjB,UAAWT,KAAKgC,MAAMvB,iB,GAnHHb,IAAMC,WCU9B6D,MAbf,WACE,OACE,6BAEE,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.a2d6cf43.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class PageHeader extends React.Component {\n    render() {\n        return (\n            <div>\n                <div className=\"jumbotron jumbotron-fluid\">\n                    <div className=\"container\">\n                        <h1 className=\"text-center text-white\">Employee Directory</h1>\n                        <p className=\"lead text-center text-white\">Click on carrots to filter by heading or use the search box to narrow results.</p>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\n\n\nexport default class SearchBar extends React.Component {\n\n\n\n\n\n    render() {\n        return (\n            <div>\n                <form onSubmit={this.props.handleSubmit}>\n                    <input\n                        name=\"search\"\n                        value={this.props.search}\n                        onChange={this.props.handleInputChange}>\n\n                    </input>\n\n                    <button>\n\n                        Search\n                    </button>\n                </form>\n            </div>\n        )\n    };\n}\n\n\n// {this.props.employees.name.filter(function (name) {\n\n//     < tr >\n//         <th scope=\"row\"></th>\n\n//         <td>\n//             <img\n//                 src={name.picture.medium}\n//                 alt='employee'\n//             />\n//         </td>\n//         {/* onClick for sort? */}\n//         <td>{name.name[0].first} {name.name[0].last}</td>\n//         <td>{name.phone}</td>\n//         <td>{name.email}</td>\n//         <td>{name.dob.date}</td>\n//     </tr>\n\n\n// })}","import React, { useReducer } from 'react';\nimport Moment from 'react-moment';\n\n// What goes here?\n\n// Employess should load on page load\n// Search should filter through list of existing employees\n\n\n\nexport default class TableData extends React.Component {\n\n\n\n    render() {\n        return (\n            <div>\n\n                <table className=\"table\">\n\n\n                    <tbody>\n\n                        {/* Map Works */}\n                        {/* Moment works */}\n\n                        {this.props.employees.map((employee) => (\n                            // Key \n                            < tr >\n                                <th scope=\"row\"></th>\n\n                                <td>\n                                    <img\n                                        src={employee.picture.medium}\n                                        alt='employee'\n                                    />\n                                </td>\n\n\n                                <td>{employee.name.first} {employee.name.last}</td>\n                                <td>{employee.phone}</td>\n                                <td>{employee.email}</td>\n                                <Moment format=\"MM/DD/YYYY\">\n                                    <td>{employee.dob.date}</td>\n                                </Moment>\n                            </tr>\n\n                        ))}\n\n\n                    </tbody>\n                </table>\n            </div >\n\n\n        )\n    }\n}\n\n","import React from 'react';\n\n// import SortByName from '../SortByName';\n\nexport default class TableHeader extends React.Component {\n\n\n    // function SortByName() {\n    //     function handleClick(e) {\n    //         e.preventDefault();\n    //         console.log('The link was clicked!');\n    //     }\n    // }\n\n\n    // Manipulate state on App component, in my case, it would be Table Area. \n    // Event handler goes here\n\n    render() {\n        return (\n            <div>\n                <table className=\"table\">\n                    <thead className=\"thead-light\">\n                        <tr>\n                            <th scope=\"col\">Image</th>\n\n\n                            <th scope=\"col\"\n\n                                onClick={this.props.SortByName}\n                            >\n                                Name\n\n                             </th>\n\n                            {/* <th scope=\"col\">Name</th> */}\n                            <th scope=\"col\">Phone</th>\n                            <th scope=\"col\">Email</th>\n                            <th scope=\"col\">DOB</th>\n                        </tr>\n                    </thead>\n\n                </table>\n            </div>\n        )\n    }\n}","import axios from \"axios\";\nimport cors from \"cors\";\n\n// const APIKEY = \"&apikey=trilogy\";\n\nexport default function getEmployeeName(query) {\n    // search: function (query) {\n    //     return axios.get(BASEURL);\n    // }\n    const BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\n    return axios.get(BASEURL);\n\n\n};\n","import React from 'react';\nimport PageHeader from '../PageHeader';\nimport SearchBar from '../SearchBar';\nimport TableData from '../TableData';\nimport TableHeader from '../TableHeader';\nimport getEmployeeName from \"../../util/API\";\n\n\n\nexport default class TableArea extends React.Component {\n\n\n    state = {\n        search: \"name\",\n        employees: []\n    };\n    // last search is staying on page\n    componentDidMount = () => {\n        this.loadEmployees();\n    }\n\n    handleInputChange = (event) => {\n        const { name, value } = event.target;\n        this.setState(\n            {\n                [name]: value\n            }\n        )\n    }\n\n    loadEmployees = () => [\n        getEmployeeName()\n            .then((response) => {\n                console.log(response);\n                this.setState(\n                    {\n                        // API returns \"results\" \n                        employees: response.data.results\n                    }\n                )\n\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    ]\n\n\n    // Working, but last search is not staying on page\n    searchEmployee = () => [\n        getEmployeeName()\n            .then((response) => {\n\n                console.log(response);\n\n                let filter = this.state.search;\n\n                let filteredList = response.data.results.filter(item => {\n                    // merge data together, then see if user input is anywhere inside  \n                    let values = Object.values(item.name.first)\n                        .join(\"\")\n                        .toLowerCase();\n                    return values.indexOf(filter.toLowerCase()) !== -1;\n                });\n\n                this.setState(\n                    {\n                        employees: filteredList\n                    }\n                )\n\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n    ]\n\n\n\n\n    handleInputSubmit = (event) => {\n        event.preventDefault();\n        console.log(\"stuff\");\n        // const BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\n\n        // const BASEURL = \"https://randomapi.com/api/6de6abfedb24f889e0b5f675edc50deb?fmt=raw&sole\";\n\n        this.searchEmployee();\n\n    }\n\n    // Last thing to do\n    SortByName = (e) => {\n        function handleClick(e) {\n            e.preventDefault();\n            console.log('The link was clicked!');\n        }\n    }\n\n    // const handleSort = (parameter) => {\n    //     (order === 'asc') ? setOrder('desc') : setOrder('asc')\n    //     const newSortedList = listUtils.sortList(employees, parameter, order)\n    //     setEmployees(newSortedList)\n    //   }\n\n\n\n    // Key?\n\n    render() {\n        return (\n            <div className=\"wrapper\" >\n\n                <PageHeader />\n\n                <SearchBar\n                    search={this.state.search}\n                    handleInputChange={this.handleInputChange}\n                    handleSubmit={this.handleInputSubmit}\n                />\n\n                {/* <TableHeader /> */}\n                <TableHeader SortByName={this.SortByName} />\n                <TableData\n                    employees={this.state.employees}\n                />\n\n            </div>\n        );\n    }\n\n}\n","import React from 'react';\nimport TableArea from './components/TableArea';\n\n\n\n\nfunction App() {\n  return (\n    <div>\n\n      <TableArea>\n\n\n      </TableArea>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}